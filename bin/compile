#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

if [ $STACK != "cedar-14" ]; then
	echo "Stack ${STACK} not supported" && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
# This is where the buildpack is stored
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

source $BUILDPACK_DIR/bin/util

export_env_dir ${ENV_DIR}

if [ -n "$BUILD_DEBUG" ]; then
	CORE_CONFIGURATION="Debug"
	CORE_ENVIRONMENT="--environment Development"
else
	CORE_CONFIGURATION="Release"
	CORE_ENVIRONMENT=""
fi

# SRC_DIR=`mktemp -d`
# # Move the app source code into temporary src dir using subshell to not leak shopt
# (
# 	shopt -s dotglob
# 	mv ${BUILD_DIR}/* ${SRC_DIR}
# )

mkdir -p ${CACHE_DIR}

echo "-----> Installing the dependencies"
apt_install libunwind8 libunwind8-dev libicu52 gettext libkrb5-3 liblttng-ust0 libssl1.0.0 zlib1g libuuid1

mkdir -p ${BUILD_DIR}/dotnet_core

echo "-----> Installing .NET CORE from ${CORE_DOWNLOAD_LOCATION}"
curl ${CORE_DOWNLOAD_LOCATION} -Ls | tar xz -C ${BUILD_DIR}/dotnet_core

echo "-----> Symlinking .NET CORE from ${BUILD_DIR}/dotnet_core to /app"
ln -s ${BUILD_DIR}/dotnet_core /app

export PATH="/app/dotnet_core:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"


PROJECT_PATH="$BUILD_DIR/$PROJECT"
echo "-----> Project path: ${PROJECT_PATH}"

echo "-----> dotnet --info"
dotnet --info


echo "-----> Restoring the packages in project path: ${PROJECT_PATH}"
dotnet restore ${PROJECT_PATH}

# configure some npm command during building
# export PATH="${PROJECT_DIR}/node_modules/.bin:${PATH}"

BUILD_OUTPUT_PATH="${BUILD_DIR}/${CORE_BUILD_OUTPUT}"
echo "-----> Publishing the app to: ${BUILD_OUTPUT_PATH}"
# --output ${CORE_BUILD_OUTPUT}
dotnet publish ${PROJECT_PATH} --configuration ${CORE_CONFIGURATION}

echo "-----> Publish Successed"

# mkdir -p ${BUILD_DIR}/.profile.d
# cp -n ${BUILDPACK_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/

# if [ -e ${SRC_DIR}/Procfile ]; then
# 	cp ${SRC_DIR}/Procfile ${BUILD_DIR}
# else
# 	cat << EOT >> ${BUILD_DIR}/Procfile
# web: cd \$HOME/heroku_output && dotnet ./${PROJECT_NAME}.dll --server.urls http://+:\$PORT ${CORE_ENVIRONMENT}
# EOT
# fi
